import os
import streamlit as st
import base64
from chatgpt_sparql import create_reduced_ontology, extract_ontology_information, generate_sparql_query, load_ontologies, execute_sparql_query, json_result_to_dataframe

cg = create_reduced_ontology()
ontology_information = extract_ontology_information(cg)

def main():
    st.set_page_config(page_title="ERA RINF chatbot", page_icon="era_favicon.ico", layout="centered", initial_sidebar_state="auto", menu_items=None)
    st.title("ERA RINF chatbot")
    st.write("This simple chatbot answers natural languages data questions about the [ERA RINF](https://rinf.era.europa.eu/rinf/) public data. It uses the [OpenAI](https://openai.com/) GPT-3 davinci model together with the [ERA vocabulary](https://data-interop.era.europa.eu/era-vocabulary/) to generate a [SPARQL](https://www.w3.org/TR/rdf-sparql-query/). Then the bot launches the query on the [EU open SPARQL endpoint](https://linked.ec-dataplatform.eu/sparql) and returns the results.")
    st.write("Because the complete ontology is too big to send as prompt to GPT, the ontology is first reduced to the classes and properties that are actually in use by the public data.")
    st.write("This application is [opensource](https://gitlab.com/mathias.vanden.auweele/era-rinf-chatbot).")

    with st.expander("Click here for some inspiration!"):
        st.markdown("Here are some prompt examples: ")
        st.markdown("- Please give me a list of all operational points")
        st.markdown("- Please give me a list of distinct manufacturers")
        st.markdown("- Please give me a list of distinct train detection systems")
        st.markdown("- Please give me a list of national railway lines. Return a table with uri, label and inCountry properties. Limit to 100 results")
        choices=[
            "a list of national railway lines. Return a table with uri, label, inCountry and the label of inCountry properties if it exists. Limit to 100 results",
            "a list of national railway lines. Return a table with uri, label, inCountry and the label of inCountry properties if it exists. Limit to 100 results. USE NAMESPACE PREFIX",
            "a list of national railway lines. Return a table with uri, label, inCountry properties and when available the label of inCountry. Limit to 100 results. USE NAMESPACE PREFIX",
        ]
        for c in choices:
            st.markdown(f"- Please give me {c}")

    user_text = st.text_input("")

    if st.button("Click to get your data answer"):
        if user_text:
            sparql_query, prompt = generate_sparql_query(user_text, ontology_information)

            st.header(f"Prompt send to GPT:")
            st.write(prompt.replace("\n","<br>"), language="text", unsafe_allow_html=True)
            # print(prompt)
            
            st.header(f"SPARQL query generated by GPT:")
            st.code(sparql_query, language="sparql")

            # Exécuter la requête SPARQL sur la base de données Fuseki
            qres = execute_sparql_query(os.getenv('SPARQL_ENDPOINT'), sparql_query)  # Remplacez cg.query par execute_sparql_query
            st.write("Data result:")

            df = json_result_to_dataframe(qres)
            st.write(df)

            # Ajoutez ces lignes pour permettre le téléchargement des résultats en format CSV
            csv = df.to_csv(index=False)
            b64 = base64.b64encode(csv.encode()).decode()
            href = f'<a href="data:file/csv;base64,{b64}" download="query_results.csv">Download this data result as CSV</a>'
            st.markdown(href, unsafe_allow_html=True)

        else:
            st.write("Ask your data question:")

if __name__ == "__main__":
    main()
